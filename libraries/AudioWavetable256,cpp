/*#include <Arduino.h>
#include "synth_wavetable_256.h"
#include "arm_math.h"
#include "utility/dspinst.h"


// uncomment for more accurate but more computationally expensive frequency modulation
//#define IMPROVE_EXPONENTIAL_ACCURACY
#define BASE_AMPLITUDE 0x6000  // 0x7fff won't work due to Gibb's phenomenon, so use 3/4 of full range.



void AudioWavetable256::update(void)
{
    audio_block_t *block, *LFOBlock;
    int16_t *bp, *obp,*end;
	int32_t val11, val12,val21, val22;
    //int16_t magnitude15;
    uint32_t i, ph, index, index2, scale;

	const uint32_t inc = phase_increment;
    
	ph = phase_accumulator + phase_offset;

	if (magnitude == 0) {
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}

	block = allocate();

    if (!block) {
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}

    /*
    LFOBlock = receiveReadOnly(0); ///TODO: LFOblock can be NULL!!! Needs to be cleared!!!

    if (!LFOBlock) {
        transmit(block);
        release(block);
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
    */

	bp = block->data;
	//obp = LFOBlock->data;


    if (!waveTables) {
        transmit(block);
        release(block);
        release(LFOBlock);
        phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
        return;
    }
    else if (!waveTables[0]) {
        transmit(block);
        release(block);
        release(LFOBlock);
        phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
        return;
    }
    


    // len = 256
    for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {

        
        //---- warp calc fix table start ---

        uint16_t lfo = 0; //int16_t(*obp++) + 32768; // int16 to uint16_t 
        lfo += morph;

        frequency(float(lfo)/3000.f);
        
        uint16_t indexW1 = lfo/H; //TODO: this chould have cordex opt!!!
        uint16_t indexW2 = uint16_t(lfo+H)/H; //TODO: this chould have cordex opt!!!
        int32_t waveInterp = int32_t(lfo%H); //TODO: this chould have cordex opt??
        //uint16_t waveInterpNorm = (uint16_t) float(waveInterp)*float(H);
        int32_t waveInterpNorm = (float(waveInterp)/float(H))*float(32768.0f); //TODO: this chould have cordex opt!!!
        bool down = indexW1 & 2;

        int32_t out1;
        int32_t out2;

        //arbdata1 = waveTables[indexW1];
        arbdata1 = waveTables[0]; //arbdata1 = waveTables[indexW1];
        arbdata2 = waveTables[1]; //arbdata2 = waveTables[indexW2];
        //---- warp calc fix table end ---
        


        index = ph >> 24;
        index2 = index + 1;
        if (index2 >= 256) index2 = 0;
        val11 = *(arbdata1 + index);
        val12 = *(arbdata1 + index2);
        scale = (ph >> 8) & 0xFFFF;
        val12 *= scale;
        val11 *= 0x10000 - scale;
        *bp++ = multiply_32x32_rshift32(val11 + val12, magnitude);
        ph += inc;

        /*
        index = ph >> 24;
        index2 = index + 1;
        if (index2 >= 256) index2 = 0;
        //do first arbdata
        val11 = *(arbdata1 + index);
        val12 = *(arbdata1 + index2);
        val21 = *(arbdata2 + index);
        val22 = *(arbdata2 + index2);
        scale = (ph >> 8) & 0xFFFF;
        val12 *= scale;
        val11 *= 0x10000 - scale;
        val22 *= scale;
        val21 *= 0x10000 - scale;
        int32_t insterpol1 = multiply_32x32_rshift32(val11 + val12, magnitude);
        int32_t insterpol2 = multiply_32x32_rshift32(val21 + val22, magnitude);
        
        // --- do correct warp interp ----
        if(down) {
            //mult (waveInterpNorm) with W2, (65535 - waveInterpNorm) whit W1
            out1 = (int64_t(insterpol1) * int64_t(32768 - waveInterpNorm)) >> 16;
            out2 = (int64_t(insterpol2) * int64_t(waveInterpNorm)) >> 16;
        }
        else {
            out1 = (int64_t(insterpol1) * int64_t(waveInterpNorm)) >> 16;
            out2 = (int64_t(insterpol2) * int64_t(32768 - waveInterpNorm)) >> 16;
        }

        //--- put out and do next momentary val ----
        //*bp++ = (out1 + out2)/2;
       //--- put out and do next momentary val ----
       //*bp++ = (out1 + out2)/2;
       *bp++ = insterpol1;
       Serial.print("insterpol1: ");
       Serial.println(insterpol1);
       ph += inc;
       */
    }
    
	phase_accumulator = ph - phase_offset;

	if (tone_offset) {
		bp = block->data;
		end = bp + AUDIO_BLOCK_SAMPLES;
		do {
			val11 = *bp;
			*bp++ = signed_saturate_rshift(val11 + tone_offset, 16, 0);
		} while (bp < end);
	}

	transmit(block);
	release(block);
    //release(LFOBlock);
}*/